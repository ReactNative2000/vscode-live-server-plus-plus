name: CI - ORCID check & Playwright

on:
  pull_request: {}
  push: {}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install root deps
        run: npm install --no-audit --no-fund

      - name: Install playwright test deps and browsers
        run: |
          cd test/playwright || exit 0
          npm install || true
          # download Playwright browsers (with deps) so tests can launch
          npx playwright install --with-deps || true

      - name: Install server deps
        run: |
          # install dependencies for the demo servers (they have their own package.json)
          cd server || exit 0
          npm install --no-audit --no-fund || true

      - name: Verify server node_modules
        run: |
          echo "server/node_modules listing:" || true
          ls -la server/node_modules || true
          echo "top-level node_modules listing:" || true
          ls -la node_modules || true

      - name: Run ORCID encryption check
        run: |
          KEY=$(node -e "console.log(require('crypto').randomBytes(32).toString('base64'))")
          ORCID_TOKEN_KEY="$KEY" NODE_PATH=server/node_modules node test/check_orcid_encryption.js

      - name: Ensure Playwright browsers (root guard)
        run: |
          # install browsers from the test folder as an extra guard
          cd test/playwright || exit 0
          npx playwright install --with-deps || true

      - name: Show Playwright cache (debug)
        run: |
          echo "Playwright cache listing:" || true
          ls -la ~/.cache/ms-playwright || true

      - name: Start local demo servers and static docs
        run: |
          # ensure native modules are rebuilt (helps sqlite3 on hosted runners)
          npm rebuild || true

          # start main node server (ORCID endpoints) on 3010
          PORT=3010 npm start > /tmp/lspp-server.log 2>&1 &
          echo $! > /tmp/lspp-server.pid

          # start hospital demo API on 4001
          node server/hospital/index.js > /tmp/hospital.log 2>&1 &
          echo $! > /tmp/hospital.pid

          # start homicide demo API on 5002
          node server/homicide/index.js > /tmp/homicide.log 2>&1 &
          echo $! > /tmp/homicide.pid

          # serve static docs on 8080 (use npx http-server, install if needed)
          npx http-server docs -p 8080 -a 127.0.0.1 -c-1 > /tmp/http-server.log 2>&1 &
          echo $! > /tmp/http-server.pid

          # wait for services to become available
          set -e
          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:8080/ >/dev/null; then break; fi
            echo "waiting for docs server... ($i)"; sleep 1
            if [ $i -eq 30 ]; then cat /tmp/http-server.log; exit 1; fi
          done

          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:4001/api/items >/dev/null; then break; fi
            echo "waiting for hospital API... ($i)"; sleep 1
            if [ $i -eq 30 ]; then tail -n +1 /tmp/hospital.log; exit 1; fi
          done

          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:5002/api/cases >/dev/null; then break; fi
            echo "waiting for homicide API... ($i)"; sleep 1
            if [ $i -eq 30 ]; then tail -n +1 /tmp/homicide.log; exit 1; fi
          done

          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:3010/health >/dev/null; then break; fi
            echo "waiting for main server (ORCID)... ($i)"; sleep 1
            if [ $i -eq 30 ]; then tail -n +1 /tmp/lspp-server.log; exit 1; fi
          done

      - name: Upload test artifacts (traces & logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces-and-logs
          path: |
            test-results/**/*.zip
            /tmp/*.log

      - name: Run Playwright E2E
        run: |
          cd test/playwright
          npx playwright test --config ../../playwright.config.js --reporter=list

      - name: Audit (informational)
        run: npm audit --json | jq '.' || true
