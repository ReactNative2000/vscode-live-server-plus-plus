name: Lighthouse (PR)

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Lighthouse and http-server
        run: |
          npm --no-audit --no-fund i -g lighthouse http-server || true

      - name: Serve docs
        run: |
          npx http-server docs -p 8080 -c-1 &
          for i in {1..10}; do
            if curl -sSf http://127.0.0.1:8080/ > /dev/null; then
              echo "server started" && break
            fi
            sleep 1
          done

      - name: Run Lighthouse (JSON + HTML)
        run: |
          mkdir -p lighthouse || true
          npx -y lighthouse http://127.0.0.1:8080/ --output=json --output=html --output-path=lighthouse/report --chrome-flags="--no-sandbox --headless" || true

      - name: Evaluate thresholds
        run: |
          python3 .github/scripts/lh_thresholds.py

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report-${{ github.event.pull_request.number }}
          path: lighthouse

      - name: Comment PR with summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs')
            const pr = context.payload.pull_request
            const jsonPath = 'lighthouse/report.report.json'
            let body = 'Lighthouse report not found.'
            if (fs.existsSync(jsonPath)) {
              const report = JSON.parse(fs.readFileSync(jsonPath))
              const categories = report.categories || {}
              const lines = []
              lines.push('## Lighthouse summary for this PR')
              lines.push('')
              for (const key of ['performance','accessibility','best-practices','seo']) {
                if (categories[key]) {
                  lines.push(`- **${key}**: ${Math.round(categories[key].score*100)}/100`)
                }
              }
              lines.push('')
              lines.push('Full HTML and JSON reports are attached as artifacts.')
              body = lines.join('\n')
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body
            })
name: Lighthouse (PR)

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Lighthouse (no global install)
        run: |
          npm --no-audit --no-fund i -g lighthouse http-server || true

      - name: Serve docs
        run: |
          npx http-server docs -p 8080 -c-1 &
          # Wait for server to start
          for i in {1..10}; do
            if curl -sSf http://127.0.0.1:8080/ > /dev/null; then
              echo "server started" && break
            fi
            sleep 1
          done

      - name: Run Lighthouse (Performance, Accessibility, Best Practices, SEO)
        id: run_lighthouse
        run: |
          mkdir -p lighthouse || true
          # Run lighthouse and output JSON+HTML (report will be lighthouse/report.report.json and lighthouse/report.report.html)
          npx -y lighthouse http://127.0.0.1:8080/ --output=json --output=html --output-path=lighthouse/report --chrome-flags="--no-sandbox --headless" || true
          ls -lah lighthouse || true

      - name: Evaluate Lighthouse thresholds
        run: |
          python3 - <<'PY'
import json,sys,os
path='lighthouse/report.report.json'
if not os.path.exists(path):
    print('Lighthouse report not found, skipping threshold check')
    sys.exit(0)
with open(path,'r') as f:
    report=json.load(f)
categories=report.get('categories',{})
scores={k: int(round(v.get('score',0)*100)) for k,v in categories.items()}
print('Lighthouse scores:', scores)
# Default thresholds; change these as needed
thresholds={'performance':50,'accessibility':70,'best-practices':60,'seo':50}
failures=[]
for k,t in thresholds.items():
    s=scores.get(k,0)
    print(f"{k}: {s} (threshold {t})")
    if s < t:
        failures.append((k,s,t))
if failures:
    print('Thresholds not met:')
    for k,s,t in failures:
        print(f'- {k}: {s} < {t}')
    sys.exit(2)
print('All thresholds met')
PY

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report-${{ github.event.pull_request.number }}
          path: lighthouse

      - name: Comment PR with summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs')
            const pr = context.payload.pull_request
            const jsonPath = 'lighthouse/report.report.json'
            let body = 'Lighthouse report not found.'
            if (fs.existsSync(jsonPath)) {
              const report = JSON.parse(fs.readFileSync(jsonPath))
              const categories = report.categories || {}
              const lines = []
              lines.push('## Lighthouse summary for this PR')
              lines.push('')
              for (const key of ['performance','accessibility','best-practices','seo']) {
                if (categories[key]) {
                  lines.push(`- **${key}**: ${Math.round(categories[key].score*100)}/100`)
                }
              }
              lines.push('')
              lines.push('Full HTML and JSON reports are attached as artifacts.')
              body = lines.join('\n')
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body
            })
name: Lighthouse (PR)

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Lighthouse (no global install)
        run: |
          npm --no-audit --no-fund i -g lighthouse http-server || true

      - name: Serve docs
        run: |
          npx http-server docs -p 8080 -c-1 &
          # Wait for server to start
          for i in {1..10}; do
            if curl -sSf http://127.0.0.1:8080/ > /dev/null; then
              echo "server started" && break
            fi
            sleep 1
          done

    - name: Run Lighthouse (Performance, Accessibility, Best Practices, SEO)
    id: run_lighthouse
    run: |
      mkdir -p lighthouse || true
      # Run lighthouse and output JSON+HTML
      npx -y lighthouse http://127.0.0.1:8080/ --output=json --output=html --output-path=lighthouse/report --chrome-flags="--no-sandbox --headless" || true
      ls -lah lighthouse || true

    - name: Evaluate Lighthouse thresholds
    id: thresholds
    run: |
      python3 - << 'PY'
import json,sys
path='lighthouse/report.report.json'
try:
  with open(path,'r') as f:
    report=json.load(f)
except Exception as e:
  print('Could not read report:',e)
  sys.exit(0)

categories=report.get('categories',{})
scores={k: int(round(v.get('score',0)*100)) for k,v in categories.items()}
print('Scores:',scores)

# thresholds (defaults)
thresholds={'performance':50,'accessibility':70,'best-practices':60,'seo':50}

bad=[]
for k,t in thresholds.items():
  s=scores.get(k,0)
  print(f'{k}: {s} (threshold {t})')
  if s < t:
    bad.append((k,s,t))

if bad:
  print('Failing because thresholds not met')
  for k,s,t in bad:
    print(f'- {k}: {s} < {t}')
  sys.exit(2)
else:
  print('All thresholds met')
PY

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report-${{ github.event.pull_request.number }}
          path: lighthouse

      - name: Comment PR with summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs')
            const pr = context.payload.pull_request
            const jsonPath = 'lighthouse/report.report.json'
            let body = 'Lighthouse report not found.'
            if (fs.existsSync(jsonPath)) {
              const report = JSON.parse(fs.readFileSync(jsonPath))
              const categories = report.categories || {}
              const lines = []
              lines.push('## Lighthouse summary for this PR')
              lines.push('')
              for (const key of ['performance','accessibility','best-practices','seo']) {
                if (categories[key]) {
                  lines.push(`- **${key}**: ${Math.round(categories[key].score*100)}/100`)
                }
              }
              lines.push('')
              lines.push('Full HTML and JSON reports are attached as artifacts.')
              body = lines.join('\n')
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body
            })
